#!/bin/bash

#
#	This version of the HandBrake CLI coverter for dashcam vids does:
#	  ->Copies all the AVI files to a temp working folder
#	  ->Converts all the AVI files in the given folder and anymore AVI files in recursive folders
#	  ->After conversion is done it will copy over all the permisions for each new mp4 files recursively.
#	  ->Then lastly it removes all temp files from working folder.

#!!!!!!!!!!!!!!!!!!!This script will not delete files on SD card.!!!!!!!!!!!!!!!!!!!

#---------------------------------------------------------------------
#
#			Notes about sourced code that started this script
#
#initiale source of this script was sourced from the below link
#source: https://surlyjake.com/blog/2010/08/10/script-to-run-handbrake-recursively-through-a-folder-tree/
#the current script currently has only a couple lines of code at most of 
#original, un-edited code.
#---------------------------------------------------------------------

#----------------------------------------------------------------------
#	This script is the beta version of the DashCam convertion script that
#	uses HandbreakCLI to re-encode the 3 minute AVI files generated by my
#	car's dashcam. When the AVI video file is re-encoded to a mp4 codec
#	the size of the file is on average reduced from around 400 MB to 
#	only 40 MB.  The is a file size reduction of about 10 percent. I do
#	this to save hard drive space.  The re-encoded 40 MB .mp4 version of the 
#	video file looks just as good in video quallity as the 400 MB AVI
#	version of the video file.  The re-encoding of these Dashcam video 
#	files reduced the amount of hard drive used by 90%.  This is why I
#	choose to re-encode.
#
#	Use this beta version of the script when making code changes. Do not 
# 	move the code changes to the Production version of the script until
#	the edited code has been thouroly tested.
#
#----------------------------------------------------------------------

# varibles for file and folder locations for mv routine
MMVHBDESTBASE="/media/jason/Backup2/VidConvert/DashCams/newvids"
MVSDSOURCEBASE="/media/jason/SD_VOL/DCIM"

prog_init(){
if [ -z "$1" ] ; then
    MMVHBDESTBASE="/media/jason/Backup2/VidConvert/DashCams/newvids"
else
    MMVHBDESTBASE="$1"
fi

if [ ! -d "$MMVHBDESTBASE" ] ; then
	echo The destination base folder at "$MMVHBDESTBASE" is not valid. Please rerun script with a valid base folder location.
	exit 2
fi

MMVHBDESTBASEDated="$MMVHBDESTBASE"\/$(date -I)

if [ ! -d "$MMVHBDESTBASEDated" ] ; then
	echo Destination working folder at "$MMVHBDESTBASEDated" is not valid
fi




#checkSDlocation(){
if [ ! -d "$MVSDSOURCEBASE" ] ; then
	echo SD folder at "$MVSDSOURCEBASE" is not valid
	#exit 2
fi
if [ ! -d "$MVSDSOURCEBASE" ] ; then
	echo SD folder at "$MVSDSOURCEBASE" is not valid
	#exit 2
fi

if [ ! -d "$MMVHBDESTBASEDated" ] ; then
	echo Destination working folder at "$MMVHBDESTBASEDated" is not valid
	#exit 2
fi
}

read_options(){
	local choice
	read -p "Would you like to create the folder $MMVHBDESTBASEDated right now or exit the script? ('C'reate or 'E'xit)" choice
	case $choice in
		C) mknewdatedfolder ;;
		c) mknewdatedfolder ;;
		E) exit 3 ;;
		e) exit 3 ;;
		0) exit 3;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}
show_vars(){
	echo Here are the current folder locations for the SD card source and the Working folder:
	echo SD Source folder:
	echo "$MVSDSOURCEBASE"
	echo
	echo Temp working folder on harddrive
	echo "$MMVHBDESTBASEDated"
	echo
	echo Folder you are in right now.
	echo "$PWD"
}
# function to display menus
show_Main_Options() {
	clear
	#nmcli -p d status
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "            Dashcam Converter"
	echo "          M A I N - M E N U"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Display varibles aka folder locations"
	echo "2. Run transcoder then Permission Cloner then Temp file eraser"
	echo "3. Run only the transcoder and permission cloner"
	echo "4. Run only the transcoder"
	echo "5. Copy files from SD card to temp folder"
	echo "6. Change to correct working folder"
	echo "7. "
	echo "8. "
	echo "9. "
	echo "0. Exit"
}

read_Main_Options(){
	local choice
	read -p "Enter choice [ 1 - 6] " choice
	case $choice in
		1) show_vars 
			;;
		2) runHBTranscoder
			runClonePermissions
			runCleanTempFiles
			;;
		3) runHBTranscoder
			runClonePermissions
			;;
		4) runHBTranscoder 
			;;
		5) cp -r -v "$MVSDSOURCEBASE" "$MMVHBDESTBASEDated"
			;;
		6) cd "$MMVHBDESTBASEDated" ;;
		7) menu1seven ;;
		8) menu1eight ;;
		9) menu1nine ;;
		0) exit 0;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}

mknewdatedfolder(){
	mkdir "$MMVHBDESTBASEDated"
	if [ $? -eq 0 ] ; then
		echo "$MMVHBDESTBASEDated" was created successfully
		cd "$MMVHBDESTBASEDated"
	else
		echo "$MMVHBDESTBASEDated" could not be created. Exiting.
		exit 2
	fi
}

read_datedfolder_options(){
	local choice2
	read -p "Which functions would you like to preform?" choice2
	case $choice2 in
		C) mknewdatedfolder ;;
		c) mknewdatedfolder ;;
		E) exit 3 ;;
		e) exit 3 ;;
		s) show_vars ;;
		0) exit 3;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}

runHBTranscoder(){
	echo
	echo "----------------------------------"
	echo "Current folder: $PWD"
	echo "Should be in this folder: $MMVHBDESTBASEDated"
	local choice3
	read -p "Is it ok to continue? Is the shell in the correct folder?(y,n)" choice3
	case $choice3 in
		Y)  break ;;
		y)   ;;
		n) exit 5 ;;
		n) exit 5 ;;
		0) exit 5;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
# Change this to specify a different handbrake preset. You can list them by running: "HandBrakeCLI --preset-list"
PRESET="iPhone & iPod touch"

if [ -z "$1" ] ; then
    TRANSCODEDIR="."
else
    TRANSCODEDIR="$1"
fi

find "$MMVHBDESTBASEDated"/* -type f -exec bash -c 'HandBrakeCLI -i "$1" -o "${1%\.*}".mp4 --preset="iPhone & iPod touch"' __ {} \;
#find "$TRANSCODEDIR"/* -type f -exec bash -c ' echo "$1" -o "${1%\.*}".mp4 --preset="iPhone & iPod touch"' __ {} \;
}

runClonePermissions(){
/home/jason/git_repositories/HandBrake_Scripts/HB_DashCam_Converter_Clone_Permissions.sh
}
runCleanTempFiles(){
/home/jason/git_repositories/HandBrake_Scripts/HB_DashCam_Converter_Remove_AVI.sh
}

# -----------------------------------
# Step #4: Main logic - infinite loop
# ------------------------------------
while true
do
	prog_init
	#show_menu1
	read_datedfolder_options
	show_vars
	show_Main_Options
	read_Main_Options
done

#---------------------------------------------------------------------
#  files and paths needed to run script from command line
#
#this folder has 2 subdirs and 3 avi files
#	cd /media/jason/Backup2/VidConvert/DashCams/Black32GBSD/10-21-2017_Black/DCIM
#	cd /media/jason/Backup2/VidConvert/DashCams

#	/home/jason/git_repositories/HandBrake_Scripts/HandbrakeProcessTreeGoodOneMaybe.sh

#   /media/jason/Backup2/VidConvert/DashCams/Testers/
#   Subdirs are Test1 - Test4. Test5 is for testing file permissions only.

#   /media/jason/SD_VOL

#===========The next line will be the command that needs to be ran in the folder
#===========that has the AVI files to convert. This is Production!!!============
#	/home/jason/git_repositories/HandBrake_Scripts/HB_DashCam_Converter-Full-Beta.sh or
#   /home/jason/git_repositories/HandBrake_Scripts/HB_DashCam_Converter-Production.sh or
#   /home/jason/git_repositories/HandBrake_Scripts/HB_DashCam_Converter_Clone_Permissions.sh

